clear all;
close all;
clc;

run('C:\Users\Dilin\Documents\MATLAB\vlfeat-0.9.20\toolbox\vl_setup');


%% Section 1 - Read Images & Calculate Features
imagePaths = getImgFiles();
imageCount = size(imagePaths,2);
images = cell(1,imageCount);
featurePoints = cell(1,imageCount);
features = cell(1,imageCount);
for i=1:imageCount
    images{i} = single(rgb2gray(imread(imagePaths{i})));
    images{i} = imresize(images{i},0.5);
    [F,D] = vl_sift(images{i});
    featurePoints{i} = F;
    features{i} = D;
end


%% Section 2 - Match the Features Points and Find The Best Stiching Path
matchCount = getMatchCounts(features,imageCount);
TH = 10;
E = zeros(imageCount,imageCount); % Error matrix for image pairs
maxWeight = 0;
allH = cell(imageCount,imageCount);
for i=1:imageCount
    for j=1:imageCount
        if(i==j)
            continue;
        end
        if(matchCount(i,j)<TH)
            E(i,j) = inf;
            continue;
        end
        matches = vl_ubcmatch(features{i},features{j});
        pts1 = featurePoints{i}(1:2,matches(1,:));
        pts2 = featurePoints{j}(1:2,matches(2,:));
        [H,ni,nf,e] = ransacH(pts1,pts2,0.2,2,10000);
        allH{i,j} = H';
        E(i,j) = e;
    end
end

[P,d, centerIdx] = randomBestPath(E,5000);



%% Section 3 - Calculate Image Transformations
% for i=1:numel(P)
%     if(i<2)
%         T = eye(3);
%     else
%         T = tforms{P(i-1)}.T*allH{P(i),P(i-1)};
%     end
%     tforms{P(i)} = projective2d(T);
% end
tforms = cell(imageCount,1);
tforms{P(centerIdx)} = projective2d(eye(3));
for i=centerIdx-1:-1:1
    T = tforms{P(i+1)}.T*allH{P(i),P(i+1)};
    tforms{P(i)} = projective2d(T);
end
for i=centerIdx+1:numel(P)
    T = tforms{P(i-1)}.T*allH{P(i),P(i+1)};
    tforms{P(i)} = projective2d(T);
end

imageSize = size(images{1});  % assume all the images are same size

centerIdx = floor((numel(tforms)/2)) + 1;

centerImageIdx = P(centerIdx);

Tinv = invert(tforms{centerImageIdx});

for i = 1:numel(tforms)    
    tforms{P(i)}.T = Tinv.T * tforms{P(i)}.T;
end

% Now, create an initial, empty, panorama into which all the images are
% mapped. 
% 
% Use the |outputLimits| method to compute the minimum and maximum output
% limits over all transformations. These values are used to automatically
% compute the size of the panorama.

for i = 1:numel(tforms)           
    [xlim(P(i),:), ylim(P(i),:)] = outputLimits(tforms{P(i)}, [1 imageSize(2)], [1 imageSize(1)]);
end

% Find the minimum and maximum output limits 
xMin = min([1; xlim(:)]);
xMax = max([imageSize(2); xlim(:)]);

yMin = min([1; ylim(:)]);
yMax = max([imageSize(1); ylim(:)]);

% Width and height of panorama.
width  = round(xMax - xMin);
height = round(yMax - yMin);



%% Section 3 - Merge All Images Into A Panorama
% Initialize the "empty" panorama.
panorama = zeros([height width 3], 'like', images{1});

% Use |imwarp| to map images into the panorama and use
% |vision.AlphaBlender| to overlay the images together.

blender = vision.AlphaBlender('Operation', 'Binary mask', ...
    'MaskSource', 'Input port');  

% Create a 2-D spatial reference object defining the size of the panorama.
xLimits = [xMin xMax];
yLimits = [yMin yMax];
panoramaView = imref2d([height width], xLimits, yLimits);

pcx = 0; % center of prev image
pcy = 0; 

% Create the panorama.
% I_ref = imread(imagePaths{P(1)});
for i = 1:imageCount
    I = imread(imagePaths{P(i)});
%     if(i~=1)
%         I = imhistmatch(I,I_ref);
%     end
    I = single(imresize(I,0.5));  
    % Transform I into the panorama.
    warpedImage = imwarp(I, tforms{P(i)}, 'OutputView', panoramaView);
    BW = warpedImage(:,:,1)>0;
    [ccy,ccx] = transformPointsForward(tforms{P(i)},width/2,height/2);
    if(pcx==0 && pcy==0)
        BW(:,:) = 1;
    else
        for x=1:size(BW,1)
            for y=1:size(BW,2)
                d1 = (x-ccx)^2 + (y-ccy)^2;
                d2 = (x-pcx)^2 + (y-pcy)^2;
                if(d2<d1 && panorama(x,y)~=0)
                    BW(x,y) = 0;
                end
            end
        end
    end
    sigma = 0.5;
    hsize = 2*round(3*sigma)+1;
    H = fspecial('gaussian',[hsize hsize],sigma);
    BW = single(BW);
    BW = imfilter(BW,H,'same');
    minBW = min(min(BW));
    maxBW = max(max(BW));
    BW = (BW-minBW)/(maxBW-minBW);
    pcx = ccx;
    pcy = ccy;
    % Overlay the warpedImage onto the panorama.
%     panorama = step(blender, panorama, warpedImage, mask);
    panorama(:,:,1) = BW.*warpedImage(:,:,1) + (1-BW).*panorama(:,:,1);
    panorama(:,:,2) = BW.*warpedImage(:,:,2) + (1-BW).*panorama(:,:,2);
    panorama(:,:,3) = BW.*warpedImage(:,:,3) + (1-BW).*panorama(:,:,3);
    
    figure
    imshow(uint8(panorama))
end

